/**
* Minimal Pistache
* This is a sample server
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * LinearAlgebraApi.h
 *
 * 
 */

#ifndef LinearAlgebraApi_H_
#define LinearAlgebraApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Distance_input.h"
#include "Distance_output.h"
#include "Dot_input.h"
#include "Dot_output.h"
#include "Get_column_input.h"
#include "Get_column_output.h"
#include "Get_row_input.h"
#include "Get_row_output.h"
#include "Magnitude_input.h"
#include "Matrix_add_input.h"
#include "Scalar_multiply_input.h"
#include "Shape_input.h"
#include "Shape_output.h"
#include "Squared_distance_input.h"
#include "Sum_of_squares_input.h"
#include "Vector_add_input.h"
#include "Vector_mean_input.h"
#include "Vector_subtract_input.h"
#include "Vector_sum_input.h"

namespace org::openapitools::server::api
{

class  LinearAlgebraApi {
public:
    explicit LinearAlgebraApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~LinearAlgebraApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void distance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void dot_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_column_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_row_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void magnitude_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void matrix_add_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void scalar_multiply_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void shape_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void squared_distance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void sum_of_squares_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void vector_add_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void vector_mean_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void vector_subtract_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void vector_sum_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void linear_algebra_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="distanceInput"> (optional)</param>
    virtual void distance(const org::openapitools::server::model::Distance_input &distanceInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="dotInput"> (optional)</param>
    virtual void dot(const org::openapitools::server::model::Dot_input &dotInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="getColumnInput"> (optional)</param>
    virtual void get_column(const org::openapitools::server::model::Get_column_input &getColumnInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="getRowInput"> (optional)</param>
    virtual void get_row(const org::openapitools::server::model::Get_row_input &getRowInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="magnitudeInput"> (optional)</param>
    virtual void magnitude(const org::openapitools::server::model::Magnitude_input &magnitudeInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="matrixAddInput"> (optional)</param>
    virtual void matrix_add(const org::openapitools::server::model::Matrix_add_input &matrixAddInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="scalarMultiplyInput"> (optional)</param>
    virtual void scalar_multiply(const org::openapitools::server::model::Scalar_multiply_input &scalarMultiplyInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="shapeInput"> (optional)</param>
    virtual void shape(const org::openapitools::server::model::Shape_input &shapeInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="squaredDistanceInput"> (optional)</param>
    virtual void squared_distance(const org::openapitools::server::model::Squared_distance_input &squaredDistanceInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="sumOfSquaresInput"> (optional)</param>
    virtual void sum_of_squares(const org::openapitools::server::model::Sum_of_squares_input &sumOfSquaresInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="vectorAddInput"> (optional)</param>
    virtual void vector_add(const org::openapitools::server::model::Vector_add_input &vectorAddInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// compute the vector whose i-th element is the mean of the i-th elements of the input vectors
    /// </remarks>
    /// <param name="vectorMeanInput"> (optional)</param>
    virtual void vector_mean(const org::openapitools::server::model::Vector_mean_input &vectorMeanInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="vectorSubtractInput"> (optional)</param>
    virtual void vector_subtract(const org::openapitools::server::model::Vector_subtract_input &vectorSubtractInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="vectorSumInput"> (optional)</param>
    virtual void vector_sum(const org::openapitools::server::model::Vector_sum_input &vectorSumInput, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* LinearAlgebraApi_H_ */

