/**
* Minimal Pistache
* This is a sample server
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * StatsApi.h
 *
 * 
 */

#ifndef StatsApi_H_
#define StatsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Bucketize_input.h"
#include "Bucketize_output.h"
#include "Correlation_input.h"
#include "Correlation_matrix_input.h"
#include "Correlation_matrix_output.h"
#include "Correlation_output.h"
#include "Covariance_input.h"
#include "Covariance_output.h"
#include "Data_range_input.h"
#include "Data_range_output.h"
#include "De_mean_input.h"
#include "De_mean_output.h"
#include "Interquartile_range_input.h"
#include "Mean_input.h"
#include "Median_input.h"
#include "Mode_input.h"
#include "Quantile_input.h"
#include "Recall_input.h"
#include "Standard_deviation_input.h"
#include "Variance_input.h"

namespace org::openapitools::server::api
{

class  StatsApi {
public:
    explicit StatsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~StatsApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void bucketize_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void correlation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void correlation_matrix_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void covariance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void data_range_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void de_mean_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void interquartile_range_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void mean_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void median_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void mode_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void quantile_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void recall_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void standard_deviation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void variance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void stats_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="bucketizeInput"> (optional)</param>
    virtual void bucketizer(const org::openapitools::server::model::Bucketize_input &bucketizeInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="correlationInput"> (optional)</param>
    virtual void correlation_control(const org::openapitools::server::model::Correlation_input &correlationInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="correlationMatrixInput"> (optional)</param>
    virtual void correlation_matrix(const org::openapitools::server::model::Correlation_matrix_input &correlationMatrixInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="covarianceInput"> (optional)</param>
    virtual void covariance(const org::openapitools::server::model::Covariance_input &covarianceInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="dataRangeInput"> (optional)</param>
    virtual void data_range(const org::openapitools::server::model::Data_range_input &dataRangeInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="deMeanInput"> (optional)</param>
    virtual void de_mean(const org::openapitools::server::model::De_mean_input &deMeanInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="interquartileRangeInput"> (optional)</param>
    virtual void interquartile_range(const org::openapitools::server::model::Interquartile_range_input &interquartileRangeInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="meanInput"> (optional)</param>
    virtual void mean(const org::openapitools::server::model::Mean_input &meanInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="medianInput"> (optional)</param>
    virtual void median(const org::openapitools::server::model::Median_input &medianInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="modeInput"> (optional)</param>
    virtual void mode(const org::openapitools::server::model::Mode_input &modeInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="quantileInput"> (optional)</param>
    virtual void quantile(const org::openapitools::server::model::Quantile_input &quantileInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="recallInput"> (optional)</param>
    virtual void recall(const org::openapitools::server::model::Recall_input &recallInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="standardDeviationInput"> (optional)</param>
    virtual void standard_deviation(const org::openapitools::server::model::Standard_deviation_input &standardDeviationInput, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="varianceInput"> (optional)</param>
    virtual void variance(const org::openapitools::server::model::Variance_input &varianceInput, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* StatsApi_H_ */

