/**
 * Minimal Pistache
 * This is a sample server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MachineLearningApiImpl.h"
#include "dspack.h"

namespace org::openapitools::server::api
{

    using namespace org::openapitools::server::model;

    MachineLearningApiImpl::MachineLearningApiImpl(const std::shared_ptr<Pistache::Rest::Router> &rtr)
        : MachineLearningApi(rtr)
    {
    }

    void MachineLearningApiImpl::accuracy_control(const Accuracy_input &accuracyInput, Pistache::Http::ResponseWriter &response)
    {
        double tp;
        double fp;
        double fn;
        double tn;
        double result;
        nlohmann::json json_to_dump;
        std::string string_to_send;

        tp = accuracyInput.getTp();
        fp = accuracyInput.getFp();
        fn = accuracyInput.getFn();
        tn = accuracyInput.getTn();

        result = accuracy(tp, fp, fn, tn);

        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void MachineLearningApiImpl::f1_score_control(const F1_score_input &f1ScoreInput, Pistache::Http::ResponseWriter &response)
    {
        double tp;
        double fp;
        double fn;
        double tn;
        double result;
        nlohmann::json json_to_dump;
        std::string string_to_send;

        tp = f1ScoreInput.getTp();
        fp = f1ScoreInput.getFp();
        fn = f1ScoreInput.getFn();
        tn = f1ScoreInput.getTn();

        result = f1_score(tp, fp, fn, tn);

        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void MachineLearningApiImpl::precision_control(const Precision_input &precisionInput, Pistache::Http::ResponseWriter &response)
    {
        double tp;
        double fp;
        double fn;
        double tn;
        double result;
        nlohmann::json json_to_dump;
        std::string string_to_send;

        tp = precisionInput.getTp();
        fp = precisionInput.getFp();
        fn = precisionInput.getFn();
        tn = precisionInput.getTn();

        result = precision(tp, fp, fn, tn);

        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void MachineLearningApiImpl::split_data_control(const Split_data_input &splitDataInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void MachineLearningApiImpl::train_test_split_control(const Train_test_split_input &trainTestSplitInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }

}
