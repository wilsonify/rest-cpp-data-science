/**
 * Minimal Pistache
 * This is a sample server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "StatsApiImpl.h"
#include "dspack.h"

namespace org::openapitools::server::api
{

    using namespace org::openapitools::server::model;

    StatsApiImpl::StatsApiImpl(const std::shared_ptr<Pistache::Rest::Router> &rtr)
        : StatsApi(rtr)
    {
    }

    void StatsApiImpl::bucketizer(const Bucketize_input &bucketizeInput, Pistache::Http::ResponseWriter &response)
    {
        double point;
        double bucket_size;
        double result;
        Bucketize_output result_output;
        nlohmann::json json_to_dump;
        std::string string_to_send;

        point = bucketizeInput.getPoint();
        bucket_size = bucketizeInput.getBucketSize();

        result = bucketize(point, bucket_size);

        result_output.setResult(result);
        result_output.setX(point);

        nlohmann::to_json(json_to_dump, result_output);
        string_to_send = json_to_dump.dump();

        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void StatsApiImpl::correlation_control(const Correlation_input &correlationInput, Pistache::Http::ResponseWriter &response)
    {

        Correlation_output result_output;
        nlohmann::json json_to_dump;
        std::string string_to_send;

        std::vector<std::vector<double>> data = correlationInput.getData();
        std::vector<double> x = get_column(data, 0);
        std::vector<double> y = get_column(data, 1);

        double result = correlation(x, y);

        result_output.setResult(result);

        nlohmann::to_json(json_to_dump, result_output);
        string_to_send = json_to_dump.dump();

        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void StatsApiImpl::correlation_matrix(const Correlation_matrix_input &correlationMatrixInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::covariance(const Covariance_input &covarianceInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::data_range(const Data_range_input &dataRangeInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::de_mean(const De_mean_input &deMeanInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::interquartile_range(const Interquartile_range_input &interquartileRangeInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::mean(const Mean_input &meanInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::median(const Median_input &medianInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::mode(const Mode_input &modeInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::quantile(const Quantile_input &quantileInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::recall(const Recall_input &recallInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::standard_deviation(const Standard_deviation_input &standardDeviationInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }
    void StatsApiImpl::variance(const Variance_input &varianceInput, Pistache::Http::ResponseWriter &response)
    {
        response.send(Pistache::Http::Code::Ok, "Do some magic\n");
    }

}
