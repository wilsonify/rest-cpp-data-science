/**
 * Minimal Pistache
 * This is a sample server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "LinearAlgebraApiImpl.h"
#include "dspack.h"

namespace org::openapitools::server::api
{

    using namespace org::openapitools::server::model;

    LinearAlgebraApiImpl::LinearAlgebraApiImpl(const std::shared_ptr<Pistache::Rest::Router> &rtr)
        : LinearAlgebraApi(rtr)
    {
    }

    void LinearAlgebraApiImpl::distance_control(const Distance_input &distanceInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = distanceInput.getV();
        auto w = distanceInput.getW();
        auto result = distance(v, w);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::dot_control(const Dot_input &dotInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = dotInput.getV();
        auto w = dotInput.getW();
        auto result = dot(v, w);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::get_column_control(const Get_column_input &getColumnInput, Pistache::Http::ResponseWriter &response)
    {
        Get_column_output result_output;
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto col = getColumnInput.getCol();
        auto mat = getColumnInput.getMat();
        auto result = get_column(mat, int(col));
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::get_row_control(const Get_row_input &getRowInput, Pistache::Http::ResponseWriter &response)
    {
        Get_row_output result_output;
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto row = getRowInput.getRow();
        auto mat = getRowInput.getMat();
        auto result = get_row(mat, int(row));
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::magnitude_control(const Magnitude_input &magnitudeInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = magnitudeInput.getV();
        auto result = magnitude(v);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::matrix_add_control(const Matrix_add_input &matrixAddInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto mat1 = matrixAddInput.getMat1();
        auto mat2 = matrixAddInput.getMat2();
        auto result = matrix_add(mat1, mat2);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::scalar_multiply_control(const Scalar_multiply_input &scalarMultiplyInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto c = scalarMultiplyInput.getC();
        auto mat = scalarMultiplyInput.getMat();
        auto v = get_column(mat, 0);
        auto result = scalar_multiply(c, v);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::shape_control(const Shape_input &shapeInput, Pistache::Http::ResponseWriter &response)
    {
        Shape_output result_output;
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto mat = shapeInput.getMat();
        auto result = shape(mat);
        result_output.setNrows(result.first);
        result_output.setNcols(result.second);
        nlohmann::to_json(json_to_dump, result_output);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::squared_distance_control(const Squared_distance_input &squaredDistanceInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = squaredDistanceInput.getV();
        auto w = squaredDistanceInput.getW();
        auto result = squared_distance(v, w);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::sum_of_squares_control(const Sum_of_squares_input &sumOfSquaresInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto x = sumOfSquaresInput.getX();
        auto result = sum_of_squares(x);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::vector_add_control(const Vector_add_input &vectorAddInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = vectorAddInput.getV();
        auto w = vectorAddInput.getW();
        auto result = vector_add(v, w);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::vector_mean_control(const Vector_mean_input &vectorMeanInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = vectorMeanInput.getV();
        auto w = vectorMeanInput.getW();
        auto result = vector_mean({v, w});
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::vector_subtract_control(const Vector_subtract_input &vectorSubtractInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = vectorSubtractInput.getV();
        auto w = vectorSubtractInput.getW();
        auto result = vector_subtract(v, w);
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }
    void LinearAlgebraApiImpl::vector_sum_control(const Vector_sum_input &vectorSumInput, Pistache::Http::ResponseWriter &response)
    {
        nlohmann::json json_to_dump;
        std::string string_to_send;
        auto v = vectorSumInput.getV();
        auto w = vectorSumInput.getW();
        auto result = vector_sum({v, w});
        nlohmann::to_json(json_to_dump, result);
        string_to_send = json_to_dump.dump();
        response.send(Pistache::Http::Code::Ok, string_to_send);
    }

}
