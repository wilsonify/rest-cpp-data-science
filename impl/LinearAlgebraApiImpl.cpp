/**
* Minimal Pistache
* This is a sample server
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "LinearAlgebraApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

LinearAlgebraApiImpl::LinearAlgebraApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : LinearAlgebraApi(rtr)
{
}

void LinearAlgebraApiImpl::distance(const Distance_input &distanceInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::dot(const Dot_input &dotInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::get_column(const Get_column_input &getColumnInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::get_row(const Get_row_input &getRowInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::magnitude(const Magnitude_input &magnitudeInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::matrix_add(const Matrix_add_input &matrixAddInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::scalar_multiply(const Scalar_multiply_input &scalarMultiplyInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::shape(const Shape_input &shapeInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::squared_distance(const Squared_distance_input &squaredDistanceInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::sum_of_squares(const Sum_of_squares_input &sumOfSquaresInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::vector_add(const Vector_add_input &vectorAddInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::vector_mean(const Vector_mean_input &vectorMeanInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::vector_subtract(const Vector_subtract_input &vectorSubtractInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void LinearAlgebraApiImpl::vector_sum(const Vector_sum_input &vectorSumInput, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

