/**
 * rest-cpp-data-science
 * data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LinearAlgebraApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_LinearAlgebraApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_LinearAlgebraApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Distance_input.h"
#include "CppRestOpenAPIClient/model/Distance_output.h"
#include "CppRestOpenAPIClient/model/Dot_input.h"
#include "CppRestOpenAPIClient/model/Dot_output.h"
#include "CppRestOpenAPIClient/model/Get_column_input.h"
#include "CppRestOpenAPIClient/model/Get_column_output.h"
#include "CppRestOpenAPIClient/model/Get_row_input.h"
#include "CppRestOpenAPIClient/model/Get_row_output.h"
#include "CppRestOpenAPIClient/model/Magnitude_input.h"
#include "CppRestOpenAPIClient/model/Matrix_add_input.h"
#include "CppRestOpenAPIClient/model/Scalar_multiply_input.h"
#include "CppRestOpenAPIClient/model/Shape_input.h"
#include "CppRestOpenAPIClient/model/Shape_output.h"
#include "CppRestOpenAPIClient/model/Squared_distance_input.h"
#include "CppRestOpenAPIClient/model/Sum_of_squares_input.h"
#include "CppRestOpenAPIClient/model/Vector_add_input.h"
#include "CppRestOpenAPIClient/model/Vector_mean_input.h"
#include "CppRestOpenAPIClient/model/Vector_subtract_input.h"
#include "CppRestOpenAPIClient/model/Vector_sum_input.h"
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  LinearAlgebraApi 
{
public:

    explicit LinearAlgebraApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~LinearAlgebraApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="distanceInput"> (optional)</param>
    pplx::task<std::shared_ptr<Distance_output>> distancePost(
        boost::optional<std::shared_ptr<Distance_input>> distanceInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="dotInput"> (optional)</param>
    pplx::task<std::shared_ptr<Dot_output>> dotPost(
        boost::optional<std::shared_ptr<Dot_input>> dotInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="getColumnInput"> (optional)</param>
    pplx::task<std::shared_ptr<Get_column_output>> getColumnPost(
        boost::optional<std::shared_ptr<Get_column_input>> getColumnInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="getRowInput"> (optional)</param>
    pplx::task<std::shared_ptr<Get_row_output>> getRowPost(
        boost::optional<std::shared_ptr<Get_row_input>> getRowInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="magnitudeInput"> (optional)</param>
    pplx::task<double> magnitudePost(
        boost::optional<std::shared_ptr<Magnitude_input>> magnitudeInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="matrixAddInput"> (optional)</param>
    pplx::task<std::vector<std::vector<double>>> matrixAddPost(
        boost::optional<std::shared_ptr<Matrix_add_input>> matrixAddInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="scalarMultiplyInput"> (optional)</param>
    pplx::task<std::vector<std::vector<double>>> scalarMultiplyPost(
        boost::optional<std::shared_ptr<Scalar_multiply_input>> scalarMultiplyInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="shapeInput"> (optional)</param>
    pplx::task<std::shared_ptr<Shape_output>> shapePost(
        boost::optional<std::shared_ptr<Shape_input>> shapeInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="squaredDistanceInput"> (optional)</param>
    pplx::task<std::vector<double>> squaredDistancePost(
        boost::optional<std::shared_ptr<Squared_distance_input>> squaredDistanceInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="sumOfSquaresInput"> (optional)</param>
    pplx::task<double> sumOfSquaresPost(
        boost::optional<std::shared_ptr<Sum_of_squares_input>> sumOfSquaresInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="vectorAddInput"> (optional)</param>
    pplx::task<std::vector<double>> vectorAddPost(
        boost::optional<std::shared_ptr<Vector_add_input>> vectorAddInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// compute the vector whose i-th element is the mean of the i-th elements of the input vectors
    /// </remarks>
    /// <param name="vectorMeanInput"> (optional)</param>
    pplx::task<std::vector<double>> vectorMeanPost(
        boost::optional<std::shared_ptr<Vector_mean_input>> vectorMeanInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="vectorSubtractInput"> (optional)</param>
    pplx::task<std::vector<double>> vectorSubtractPost(
        boost::optional<std::shared_ptr<Vector_subtract_input>> vectorSubtractInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="vectorSumInput"> (optional)</param>
    pplx::task<std::vector<double>> vectorSumPost(
        boost::optional<std::shared_ptr<Vector_sum_input>> vectorSumInput
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_LinearAlgebraApi_H_ */

