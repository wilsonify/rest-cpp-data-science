/**
 * rest-cpp-data-science
 * data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GradientDescentApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_GradientDescentApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_GradientDescentApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Difference_quotient_input.h"
#include "CppRestOpenAPIClient/model/Difference_quotient_output.h"
#include "CppRestOpenAPIClient/model/Estimate_gradient_input.h"
#include "CppRestOpenAPIClient/model/Estimate_gradient_output.h"
#include "CppRestOpenAPIClient/model/In_random_order_input.h"
#include "CppRestOpenAPIClient/model/Maximize_batch_input.h"
#include "CppRestOpenAPIClient/model/Maximize_batch_output.h"
#include "CppRestOpenAPIClient/model/Maximize_stochastic_input.h"
#include "CppRestOpenAPIClient/model/Maximize_stochastic_output.h"
#include "CppRestOpenAPIClient/model/Minimize_batch_input.h"
#include "CppRestOpenAPIClient/model/Minimize_batch_output.h"
#include "CppRestOpenAPIClient/model/Minimize_stochastic_input.h"
#include "CppRestOpenAPIClient/model/Minimize_stochastic_output.h"
#include "CppRestOpenAPIClient/model/Partial_difference_quotient_input.h"
#include "CppRestOpenAPIClient/model/Partial_difference_quotient_output.h"
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  GradientDescentApi 
{
public:

    explicit GradientDescentApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~GradientDescentApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="differenceQuotientInput"> (optional)</param>
    pplx::task<std::shared_ptr<Difference_quotient_output>> differenceQuotientPost(
        boost::optional<std::shared_ptr<Difference_quotient_input>> differenceQuotientInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="estimateGradientInput"> (optional)</param>
    pplx::task<std::shared_ptr<Estimate_gradient_output>> estimateGradientPost(
        boost::optional<std::shared_ptr<Estimate_gradient_input>> estimateGradientInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="inRandomOrderInput"> (optional)</param>
    pplx::task<std::vector<double>> inRandomOrderPost(
        boost::optional<std::shared_ptr<In_random_order_input>> inRandomOrderInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// use gradient descent to find theta that minimizes target function
    /// </remarks>
    /// <param name="maximizeBatchInput"> (optional)</param>
    pplx::task<std::shared_ptr<Maximize_batch_output>> maximizeBatchPost(
        boost::optional<std::shared_ptr<Maximize_batch_input>> maximizeBatchInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="maximizeStochasticInput"> (optional)</param>
    pplx::task<std::shared_ptr<Maximize_stochastic_output>> maximizeStochasticPost(
        boost::optional<std::shared_ptr<Maximize_stochastic_input>> maximizeStochasticInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="minimizeBatchInput"> (optional)</param>
    pplx::task<std::shared_ptr<Minimize_batch_output>> minimizeBatchPost(
        boost::optional<std::shared_ptr<Minimize_batch_input>> minimizeBatchInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="minimizeStochasticInput"> (optional)</param>
    pplx::task<std::shared_ptr<Minimize_stochastic_output>> minimizeStochasticPost(
        boost::optional<std::shared_ptr<Minimize_stochastic_input>> minimizeStochasticInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// add h to just the i-th element of v
    /// </remarks>
    /// <param name="partialDifferenceQuotientInput"> (optional)</param>
    pplx::task<std::shared_ptr<Partial_difference_quotient_output>> partialDifferenceQuotientPost(
        boost::optional<std::shared_ptr<Partial_difference_quotient_input>> partialDifferenceQuotientInput
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_GradientDescentApi_H_ */

