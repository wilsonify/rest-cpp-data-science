/**
 * rest-cpp-data-science
 * data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StatsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_StatsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_StatsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Bucketize_input.h"
#include "CppRestOpenAPIClient/model/Bucketize_output.h"
#include "CppRestOpenAPIClient/model/Correlation_input.h"
#include "CppRestOpenAPIClient/model/Correlation_matrix_input.h"
#include "CppRestOpenAPIClient/model/Correlation_matrix_output.h"
#include "CppRestOpenAPIClient/model/Correlation_output.h"
#include "CppRestOpenAPIClient/model/Covariance_input.h"
#include "CppRestOpenAPIClient/model/Covariance_output.h"
#include "CppRestOpenAPIClient/model/Data_range_input.h"
#include "CppRestOpenAPIClient/model/Data_range_output.h"
#include "CppRestOpenAPIClient/model/De_mean_input.h"
#include "CppRestOpenAPIClient/model/De_mean_output.h"
#include "CppRestOpenAPIClient/model/Interquartile_range_input.h"
#include "CppRestOpenAPIClient/model/Mean_input.h"
#include "CppRestOpenAPIClient/model/Median_input.h"
#include "CppRestOpenAPIClient/model/Mode_input.h"
#include "CppRestOpenAPIClient/model/Quantile_input.h"
#include "CppRestOpenAPIClient/model/Recall_input.h"
#include "CppRestOpenAPIClient/model/Standard_deviation_input.h"
#include "CppRestOpenAPIClient/model/Variance_input.h"
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  StatsApi 
{
public:

    explicit StatsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~StatsApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="bucketizeInput"> (optional)</param>
    pplx::task<std::shared_ptr<Bucketize_output>> bucketizePost(
        boost::optional<std::shared_ptr<Bucketize_input>> bucketizeInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="correlationMatrixInput"> (optional)</param>
    pplx::task<std::shared_ptr<Correlation_matrix_output>> correlationMatrixPost(
        boost::optional<std::shared_ptr<Correlation_matrix_input>> correlationMatrixInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="correlationInput"> (optional)</param>
    pplx::task<std::shared_ptr<Correlation_output>> correlationPost(
        boost::optional<std::shared_ptr<Correlation_input>> correlationInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="covarianceInput"> (optional)</param>
    pplx::task<std::shared_ptr<Covariance_output>> covariancePost(
        boost::optional<std::shared_ptr<Covariance_input>> covarianceInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="dataRangeInput"> (optional)</param>
    pplx::task<std::shared_ptr<Data_range_output>> dataRangePost(
        boost::optional<std::shared_ptr<Data_range_input>> dataRangeInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="deMeanInput"> (optional)</param>
    pplx::task<std::shared_ptr<De_mean_output>> deMeanPost(
        boost::optional<std::shared_ptr<De_mean_input>> deMeanInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="interquartileRangeInput"> (optional)</param>
    pplx::task<double> interquartileRangePost(
        boost::optional<std::shared_ptr<Interquartile_range_input>> interquartileRangeInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="meanInput"> (optional)</param>
    pplx::task<double> meanPost(
        boost::optional<std::shared_ptr<Mean_input>> meanInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="medianInput"> (optional)</param>
    pplx::task<double> medianPost(
        boost::optional<std::shared_ptr<Median_input>> medianInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="modeInput"> (optional)</param>
    pplx::task<std::vector<double>> modePost(
        boost::optional<std::shared_ptr<Mode_input>> modeInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="quantileInput"> (optional)</param>
    pplx::task<double> quantilePost(
        boost::optional<std::shared_ptr<Quantile_input>> quantileInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="recallInput"> (optional)</param>
    pplx::task<double> recallPost(
        boost::optional<std::shared_ptr<Recall_input>> recallInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="standardDeviationInput"> (optional)</param>
    pplx::task<double> standardDeviationPost(
        boost::optional<std::shared_ptr<Standard_deviation_input>> standardDeviationInput
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Description of the endpoint
    /// </remarks>
    /// <param name="varianceInput"> (optional)</param>
    pplx::task<double> variancePost(
        boost::optional<std::shared_ptr<Variance_input>> varianceInput
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_StatsApi_H_ */

