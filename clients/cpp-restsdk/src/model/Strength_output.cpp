/**
 * rest-cpp-data-science
 * data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Strength_output.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Strength_output::Strength_output()
{
    m_Actual = 0;
    m_ActualIsSet = false;
    m_Expected = 0;
    m_ExpectedIsSet = false;
    m_Strength = 0.0;
    m_StrengthIsSet = false;
}

Strength_output::~Strength_output()
{
}

void Strength_output::validate()
{
    // TODO: implement validation
}

web::json::value Strength_output::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActualIsSet)
    {
        val[utility::conversions::to_string_t(U("actual"))] = ModelBase::toJson(m_Actual);
    }
    if(m_ExpectedIsSet)
    {
        val[utility::conversions::to_string_t(U("expected"))] = ModelBase::toJson(m_Expected);
    }
    if(m_StrengthIsSet)
    {
        val[utility::conversions::to_string_t(U("strength"))] = ModelBase::toJson(m_Strength);
    }

    return val;
}

bool Strength_output::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("actual"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("actual")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setActual;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActual);
            setActual(refVal_setActual);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expected"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expected")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExpected;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpected);
            setExpected(refVal_setExpected);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("strength"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("strength")));
        if(!fieldValue.is_null())
        {
            double refVal_setStrength;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStrength);
            setStrength(refVal_setStrength);
        }
    }
    return ok;
}

void Strength_output::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ActualIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("actual")), m_Actual));
    }
    if(m_ExpectedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expected")), m_Expected));
    }
    if(m_StrengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("strength")), m_Strength));
    }
}

bool Strength_output::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("actual"))))
    {
        int32_t refVal_setActual;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("actual"))), refVal_setActual );
        setActual(refVal_setActual);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expected"))))
    {
        int32_t refVal_setExpected;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expected"))), refVal_setExpected );
        setExpected(refVal_setExpected);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("strength"))))
    {
        double refVal_setStrength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("strength"))), refVal_setStrength );
        setStrength(refVal_setStrength);
    }
    return ok;
}

int32_t Strength_output::getActual() const
{
    return m_Actual;
}

void Strength_output::setActual(int32_t value)
{
    m_Actual = value;
    m_ActualIsSet = true;
}

bool Strength_output::actualIsSet() const
{
    return m_ActualIsSet;
}

void Strength_output::unsetActual()
{
    m_ActualIsSet = false;
}
int32_t Strength_output::getExpected() const
{
    return m_Expected;
}

void Strength_output::setExpected(int32_t value)
{
    m_Expected = value;
    m_ExpectedIsSet = true;
}

bool Strength_output::expectedIsSet() const
{
    return m_ExpectedIsSet;
}

void Strength_output::unsetExpected()
{
    m_ExpectedIsSet = false;
}
double Strength_output::getStrength() const
{
    return m_Strength;
}

void Strength_output::setStrength(double value)
{
    m_Strength = value;
    m_StrengthIsSet = true;
}

bool Strength_output::strengthIsSet() const
{
    return m_StrengthIsSet;
}

void Strength_output::unsetStrength()
{
    m_StrengthIsSet = false;
}
}
}
}
}


