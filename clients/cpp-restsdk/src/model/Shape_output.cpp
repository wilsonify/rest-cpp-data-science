/**
 * rest-cpp-data-science
 * data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Shape_output.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Shape_output::Shape_output()
{
    m_Nrows = 0.0;
    m_NrowsIsSet = false;
    m_Ncols = 0.0;
    m_NcolsIsSet = false;
}

Shape_output::~Shape_output()
{
}

void Shape_output::validate()
{
    // TODO: implement validation
}

web::json::value Shape_output::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NrowsIsSet)
    {
        val[utility::conversions::to_string_t(U("nrows"))] = ModelBase::toJson(m_Nrows);
    }
    if(m_NcolsIsSet)
    {
        val[utility::conversions::to_string_t(U("ncols"))] = ModelBase::toJson(m_Ncols);
    }

    return val;
}

bool Shape_output::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("nrows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nrows")));
        if(!fieldValue.is_null())
        {
            double refVal_setNrows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNrows);
            setNrows(refVal_setNrows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ncols"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ncols")));
        if(!fieldValue.is_null())
        {
            double refVal_setNcols;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNcols);
            setNcols(refVal_setNcols);
        }
    }
    return ok;
}

void Shape_output::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NrowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nrows")), m_Nrows));
    }
    if(m_NcolsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ncols")), m_Ncols));
    }
}

bool Shape_output::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("nrows"))))
    {
        double refVal_setNrows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nrows"))), refVal_setNrows );
        setNrows(refVal_setNrows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ncols"))))
    {
        double refVal_setNcols;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ncols"))), refVal_setNcols );
        setNcols(refVal_setNcols);
    }
    return ok;
}

double Shape_output::getNrows() const
{
    return m_Nrows;
}

void Shape_output::setNrows(double value)
{
    m_Nrows = value;
    m_NrowsIsSet = true;
}

bool Shape_output::nrowsIsSet() const
{
    return m_NrowsIsSet;
}

void Shape_output::unsetNrows()
{
    m_NrowsIsSet = false;
}
double Shape_output::getNcols() const
{
    return m_Ncols;
}

void Shape_output::setNcols(double value)
{
    m_Ncols = value;
    m_NcolsIsSet = true;
}

bool Shape_output::ncolsIsSet() const
{
    return m_NcolsIsSet;
}

void Shape_output::unsetNcols()
{
    m_NcolsIsSet = false;
}
}
}
}
}


