/**
 * rest-cpp-data-science
 * data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Matrix_add_input.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Matrix_add_input::Matrix_add_input()
{
    m_Mat1IsSet = false;
    m_Mat2IsSet = false;
}

Matrix_add_input::~Matrix_add_input()
{
}

void Matrix_add_input::validate()
{
    // TODO: implement validation
}

web::json::value Matrix_add_input::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Mat1IsSet)
    {
        val[utility::conversions::to_string_t(U("mat1"))] = ModelBase::toJson(m_Mat1);
    }
    if(m_Mat2IsSet)
    {
        val[utility::conversions::to_string_t(U("mat2"))] = ModelBase::toJson(m_Mat2);
    }

    return val;
}

bool Matrix_add_input::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("mat1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mat1")));
        if(!fieldValue.is_null())
        {
            std::vector<std::vector<double>> refVal_setMat1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMat1);
            setMat1(refVal_setMat1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mat2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mat2")));
        if(!fieldValue.is_null())
        {
            std::vector<std::vector<double>> refVal_setMat2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMat2);
            setMat2(refVal_setMat2);
        }
    }
    return ok;
}

void Matrix_add_input::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Mat1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mat1")), m_Mat1));
    }
    if(m_Mat2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mat2")), m_Mat2));
    }
}

bool Matrix_add_input::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("mat1"))))
    {
        std::vector<std::vector<double>> refVal_setMat1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mat1"))), refVal_setMat1 );
        setMat1(refVal_setMat1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mat2"))))
    {
        std::vector<std::vector<double>> refVal_setMat2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mat2"))), refVal_setMat2 );
        setMat2(refVal_setMat2);
    }
    return ok;
}

std::vector<std::vector<double>>& Matrix_add_input::getMat1()
{
    return m_Mat1;
}

void Matrix_add_input::setMat1(const std::vector<std::vector<double>>& value)
{
    m_Mat1 = value;
    m_Mat1IsSet = true;
}

bool Matrix_add_input::mat1IsSet() const
{
    return m_Mat1IsSet;
}

void Matrix_add_input::unsetMat1()
{
    m_Mat1IsSet = false;
}
std::vector<std::vector<double>>& Matrix_add_input::getMat2()
{
    return m_Mat2;
}

void Matrix_add_input::setMat2(const std::vector<std::vector<double>>& value)
{
    m_Mat2 = value;
    m_Mat2IsSet = true;
}

bool Matrix_add_input::mat2IsSet() const
{
    return m_Mat2IsSet;
}

void Matrix_add_input::unsetMat2()
{
    m_Mat2IsSet = false;
}
}
}
}
}


