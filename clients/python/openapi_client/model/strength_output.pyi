# coding: utf-8

"""
    rest-cpp-data-science

    data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client_py import schemas  # noqa: F401


class StrengthOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            actual = schemas.IntSchema
            expected = schemas.IntSchema
            strength = schemas.NumberSchema
            __annotations__ = {
                "actual": actual,
                "expected": expected,
                "strength": strength,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actual"]) -> MetaOapg.properties.actual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected"]) -> MetaOapg.properties.expected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strength"]) -> MetaOapg.properties.strength: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["actual", "expected", "strength", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actual"]) -> typing.Union[MetaOapg.properties.actual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected"]) -> typing.Union[MetaOapg.properties.expected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strength"]) -> typing.Union[MetaOapg.properties.strength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["actual", "expected", "strength", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        actual: typing.Union[MetaOapg.properties.actual, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected: typing.Union[MetaOapg.properties.expected, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        strength: typing.Union[MetaOapg.properties.strength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StrengthOutput':
        return super().__new__(
            cls,
            *_args,
            actual=actual,
            expected=expected,
            strength=strength,
            _configuration=_configuration,
            **kwargs,
        )
