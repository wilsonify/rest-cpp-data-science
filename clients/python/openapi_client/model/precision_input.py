# coding: utf-8

"""
    rest-cpp-data-science

    data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client_py import schemas  # noqa: F401


class PrecisionInput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            tp = schemas.NumberSchema
            fp = schemas.NumberSchema
            fn = schemas.NumberSchema
            tn = schemas.NumberSchema
            __annotations__ = {
                "tp": tp,
                "fp": fp,
                "fn": fn,
                "tn": tn,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tp"]) -> MetaOapg.properties.tp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fp"]) -> MetaOapg.properties.fp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fn"]) -> MetaOapg.properties.fn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tn"]) -> MetaOapg.properties.tn: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tp", "fp", "fn", "tn", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tp"]) -> typing.Union[MetaOapg.properties.tp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fp"]) -> typing.Union[MetaOapg.properties.fp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fn"]) -> typing.Union[MetaOapg.properties.fn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tn"]) -> typing.Union[MetaOapg.properties.tn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tp", "fp", "fn", "tn", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tp: typing.Union[MetaOapg.properties.tp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fp: typing.Union[MetaOapg.properties.fp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fn: typing.Union[MetaOapg.properties.fn, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tn: typing.Union[MetaOapg.properties.tn, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PrecisionInput':
        return super().__new__(
            cls,
            *_args,
            tp=tp,
            fp=fp,
            fn=fn,
            tn=tn,
            _configuration=_configuration,
            **kwargs,
        )
