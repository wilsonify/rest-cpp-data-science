# coding: utf-8

"""
    rest-cpp-data-science

    data science REST API endpoints, parameters, and responses, including information about preprocessing data, training models, making predictions, and evaluating models.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictFloat

class TrainTestSplitOutput(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    x_train: Optional[List[List[StrictFloat]]] = None
    x_test: Optional[List[List[StrictFloat]]] = None
    y_train: Optional[List[StrictFloat]] = None
    y_test: Optional[List[StrictFloat]] = None
    __properties = ["x_train", "x_test", "y_train", "y_test"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrainTestSplitOutput:
        """Create an instance of TrainTestSplitOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrainTestSplitOutput:
        """Create an instance of TrainTestSplitOutput from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TrainTestSplitOutput.parse_obj(obj)

        _obj = TrainTestSplitOutput.parse_obj({
            "x_train": obj.get("x_train"),
            "x_test": obj.get("x_test"),
            "y_train": obj.get("y_train"),
            "y_test": obj.get("y_test")
        })
        return _obj

